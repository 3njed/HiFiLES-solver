// data for gauss quadrature rule

locs.setup(n_pts);
weights.setup(n_pts);

if (n_pts==2)
{
	 locs(0)=-0.577350269189626;
	 locs(1)=0.577350269189626;

	 weights(0)=1.000000000000000;
	 weights(1)=1.000000000000000;
}
else if (n_pts==3)
{

	 locs(0)=-0.774596669241483;
	 locs(1)=-0.000000000000000;
	 locs(2)=0.774596669241483;

	 weights(0)=0.555555555555556;
	 weights(1)=0.888888888888889;
	 weights(2)=0.555555555555556;
}
else if (n_pts==4)
{
	 locs(0)=-0.861136311594053;
	 locs(1)=-0.339981043584856;
	 locs(2)=0.339981043584856;
	 locs(3)=0.861136311594053;

	 weights(0)=0.347854845137454;
	 weights(1)=0.652145154862546;
	 weights(2)=0.652145154862546;
	 weights(3)=0.347854845137454;
}
else if (n_pts==5)
{
	 locs(0)=-0.906179845938664;
	 locs(1)=-0.538469310105683;
	 locs(2)=-0.000000000000000;
	 locs(3)=0.538469310105683;
	 locs(4)=0.906179845938664;

	 weights(0)=0.236926885056189;
	 weights(1)=0.478628670499366;
	 weights(2)=0.568888888888889;
	 weights(3)=0.478628670499367;
	 weights(4)=0.236926885056189;
}
else if (n_pts==6)
{

	 locs(0)=-0.932469514203152;
	 locs(1)=-0.661209386466264;
	 locs(2)=-0.238619186083197;
	 locs(3)=0.238619186083197;
	 locs(4)=0.661209386466265;
	 locs(5)=0.932469514203152;

	 weights(0)=0.171324492379170;
	 weights(1)=0.360761573048139;
	 weights(2)=0.467913934572691;
	 weights(3)=0.467913934572692;
	 weights(4)=0.360761573048138;
	 weights(5)=0.171324492379170;
}
else if (n_pts==7)
{
	 locs(0)=-0.949107912342758;
	 locs(1)=-0.741531185599395;
	 locs(2)=-0.405845151377397;
	 locs(3)=0.000000000000000;
	 locs(4)=0.405845151377397;
	 locs(5)=0.741531185599394;
	 locs(6)=0.949107912342758;

	 weights(0)=0.129484966168869;
	 weights(1)=0.279705391489277;
	 weights(2)=0.381830050505119;
	 weights(3)=0.417959183673470;
	 weights(4)=0.381830050505119;
	 weights(5)=0.279705391489277;
	 weights(6)=0.129484966168869;
}
else if (n_pts==8)
{
	 locs(0)=-0.960289856497536;
	 locs(1)=-0.796666477413627;
	 locs(2)=-0.525532409916329;
	 locs(3)=-0.183434642495650;
	 locs(4)=0.183434642495650;
	 locs(5)=0.525532409916329;
	 locs(6)=0.796666477413627;
	 locs(7)=0.960289856497536;

	 weights(0)=0.101228536290376;
	 weights(1)=0.222381034453374;
	 weights(2)=0.313706645877888;
	 weights(3)=0.362683783378362;
	 weights(4)=0.362683783378362;
	 weights(5)=0.313706645877888;
	 weights(6)=0.222381034453374;
	 weights(7)=0.101228536290376;
}
else if (n_pts==9)
{
	 locs(0)=-0.968160239507626;
	 locs(1)=-0.836031107326636;
	 locs(2)=-0.613371432700591;
	 locs(3)=-0.324253423403809;
	 locs(4)=0.000000000000000;
	 locs(5)=0.324253423403809;
	 locs(6)=0.613371432700591;
	 locs(7)=0.836031107326636;
	 locs(8)=0.968160239507626;

	 weights(0)=0.081274388361575;
	 weights(1)=0.180648160694857;
	 weights(2)=0.260610696402936;
	 weights(3)=0.312347077040003;
	 weights(4)=0.330239355001259;
	 weights(5)=0.312347077040003;
	 weights(6)=0.260610696402935;
	 weights(7)=0.180648160694857;
	 weights(8)=0.081274388361574;
}
else if (n_pts==10)
{
	 locs(0)=-0.973906528517172;
	 locs(1)=-0.865063366688985;
	 locs(2)=-0.679409568299024;
	 locs(3)=-0.433395394129247;
	 locs(4)=-0.148874338981631;
	 locs(5)=0.148874338981632;
	 locs(6)=0.433395394129247;
	 locs(7)=0.679409568299024;
	 locs(8)=0.865063366688984;
	 locs(9)=0.973906528517171;

	 weights(0)=0.066671344308688;
	 weights(1)=0.149451349150581;
	 weights(2)=0.219086362515982;
	 weights(3)=0.269266719309996;
	 weights(4)=0.295524224714753;
	 weights(5)=0.295524224714753;
	 weights(6)=0.269266719309996;
	 weights(7)=0.219086362515981;
	 weights(8)=0.149451349150581;
	 weights(9)=0.066671344308688;
}
else if (n_pts==11)
{
	 locs(0)=-0.978228658146057;
	 locs(1)=-0.887062599768095;
	 locs(2)=-0.730152005574049;
	 locs(3)=-0.519096129206812;
	 locs(4)=-0.269543155952345;
	 locs(5)=-0.000000000000000;
	 locs(6)=0.269543155952345;
	 locs(7)=0.519096129206812;
	 locs(8)=0.730152005574049;
	 locs(9)=0.887062599768095;
	 locs(10)=0.978228658146057;

	 weights(0)=0.055668567116174;
	 weights(1)=0.125580369464905;
	 weights(2)=0.186290210927734;
	 weights(3)=0.233193764591990;
	 weights(4)=0.262804544510247;
	 weights(5)=0.272925086777900;
	 weights(6)=0.262804544510247;
	 weights(7)=0.233193764591990;
	 weights(8)=0.186290210927733;
	 weights(9)=0.125580369464905;
	 weights(10)=0.055668567116174;
}
else if (n_pts==12)
{
	 locs(0)=-0.981560634246719;
	 locs(1)=-0.904117256370475;
	 locs(2)=-0.769902674194305;
	 locs(3)=-0.587317954286617;
	 locs(4)=-0.367831498998180;
	 locs(5)=-0.125233408511469;
	 locs(6)=0.125233408511469;
	 locs(7)=0.367831498998180;
	 locs(8)=0.587317954286618;
	 locs(9)=0.769902674194305;
	 locs(10)=0.904117256370475;
	 locs(11)=0.981560634246719;

	 weights(0)=0.047175336386512;
	 weights(1)=0.106939325995318;
	 weights(2)=0.160078328543346;
	 weights(3)=0.203167426723066;
	 weights(4)=0.233492536538355;
	 weights(5)=0.249147045813403;
	 weights(6)=0.249147045813402;
	 weights(7)=0.233492536538355;
	 weights(8)=0.203167426723065;
	 weights(9)=0.160078328543346;
	 weights(10)=0.106939325995318;
	 weights(11)=0.047175336386511;
}
else
{
	order=0;
	n_pts=0;
	FatalError("ERROR: Order of quadrature rule currently not implemented ....");
}
